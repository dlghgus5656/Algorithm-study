# 골드바흐의 추측

# 문제
# 1보다 큰 자연수 중에서  1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다. 예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다. 하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.

# 골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 이러한 수를 골드바흐 수라고 한다. 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다. 예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다. 10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.

# 2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오. 만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.

# 입력
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고 짝수 n이 주어진다.

# 출력
# 각 테스트 케이스에 대해서 주어진 n의 골드바흐 파티션을 출력한다. 출력하는 소수는 작은 것부터 먼저 출력하며, 공백으로 구분한다.

# 제한
# 4 ≤ n ≤ 10,000
# 예제 입력 1
# 3
# 8
# 10
# 16
# 예제 출력 1
# 3 5
# 5 5
# 5 11

# 1. 차이가 가장 적으려면 출발점을 반절 값에서 시작.
# 2. 반절값부터 한쪽은 1씩 줄어들고,
# 한쪽은 1씩 늘어나면서 그 값들이 소수가 맞는지 판별

from sys import stdin

T = int(stdin.readline())  # 1. 테스트 케이스 개수를 받는다 = T


def prime(number):  # 2. 소수를 판별하는 함수를 만든다
    if number == 1:
        return False

    for j in range(2, int(number**0.5)+1):
        if number % j == 0:
            return False

    return True


for i in range(T):
    n = int(stdin.readline())  # 3. 값을 입력받아 n으로 지정하고,

    a = int(n/2)  # 3. 반절 값을 시작으로 하나씩 줄여나갈 변수를 지정.
    b = int(n/2)  # 3. 반절 값을 시작으로 하나씩 늘여나갈 변수를 지정.

    for k in range(int(n/2)):  # 4. n 전체가 아닌 반절값만 증명하면 OK
        if prime(a) == True and prime(b) == True:  # 4-1. a,b 둘다 소수일 경우 Yes 출력
            print(a, b)
            break
        else:  # 4-2. 아닐 경우 변수의 차이를 두어 확인
            a = a-1
            b = b+1
